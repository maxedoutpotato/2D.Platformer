<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D Platformer 3D Scene</title>
    <style>
        body { margin: 0; overflow: hidden; font-family: 'Inter', sans-serif; }
        canvas { display: block; }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 14px;
            background: rgba(0, 0, 0, 0.5);
            padding: 8px;
            border-radius: 8px;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div id="info">
        Click and drag to rotate camera.
        <br>
        Main Character (Idle.png) and Ground (Ground.png) are placeholders.
        <br>
        Replace URLs with your actual image paths.
    </div>
    <script type="module">
        import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';

        let scene, camera, renderer;
        let characterMesh, groundMesh;
        let isDragging = false;
        let previousMousePosition = { x: 0, y: 0 };
        const rotationSpeed = 0.005; // Adjust for faster/slower rotation

        // Function to initialize the 3D scene
        function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x222222); // Dark background

            // Camera setup
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 2, 5); // Initial camera position
            camera.lookAt(0, 0, 0); // Look at the origin

            // Renderer setup
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            // Add ambient light
            const ambientLight = new THREE.AmbientLight(0x404040, 2); // soft white light
            scene.add(ambientLight);

            // Add directional light for better visibility
            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5).normalize();
            scene.add(directionalLight);

            // Add Axes Helper (X-red, Y-green, Z-blue)
            const axesHelper = new THREE.AxesHelper(5); // Size of the axes
            scene.add(axesHelper);

            // Load textures
            const textureLoader = new THREE.TextureLoader();

            // Main Character (Idle.png) - Placeholder
            // IMPORTANT: Replace this URL with the actual public URL of your 'Idle.png'
            const characterTextureUrl = 'https://placehold.co/512x512/FF0000/FFFFFF?text=Samuray+Doge+Idle'; // Placeholder
            textureLoader.load(characterTextureUrl,
                function(texture) {
                    const characterMaterial = new THREE.MeshBasicMaterial({
                        map: texture,
                        transparent: true, // Enable transparency
                        alphaTest: 0.5,    // Helps with alpha blending issues
                        side: THREE.DoubleSide // Render both sides of the plane
                    });
                    const characterGeometry = new THREE.PlaneGeometry(2, 2); // Adjust size as needed
                    characterMesh = new THREE.Mesh(characterGeometry, characterMaterial);
                    characterMesh.position.set(0, 0.5, 0); // Position at origin, slightly above ground
                    scene.add(characterMesh);
                },
                undefined, // onProgress callback
                function(err) {
                    console.error('An error occurred loading the character texture:', err);
                    // Fallback: create a red square if image fails to load
                    const fallbackMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
                    const fallbackGeometry = new THREE.PlaneGeometry(2, 2);
                    characterMesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);
                    characterMesh.position.set(0, 0.5, 0);
                    scene.add(characterMesh);
                }
            );

            // Ground (Ground.png) - Placeholder
            // IMPORTANT: Replace this URL with the actual public URL of your 'Ground.png'
            const groundTextureUrl = 'https://placehold.co/512x512/00FF00/FFFFFF?text=Ground'; // Placeholder
            textureLoader.load(groundTextureUrl,
                function(texture) {
                    const groundMaterial = new THREE.MeshBasicMaterial({
                        map: texture,
                        transparent: true, // Enable transparency
                        alphaTest: 0.5,    // Helps with alpha blending issues
                        side: THREE.DoubleSide // Render both sides of the plane
                    });
                    const groundGeometry = new THREE.PlaneGeometry(10, 2); // Wider for ground
                    groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);
                    groundMesh.position.set(0, -0.5, -1); // Slightly behind character, below origin
                    scene.add(groundMesh);
                },
                undefined, // onProgress callback
                function(err) {
                    console.error('An error occurred loading the ground texture:', err);
                    // Fallback: create a green plane if image fails to load
                    const fallbackMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
                    const fallbackGeometry = new THREE.PlaneGeometry(10, 2);
                    groundMesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);
                    groundMesh.position.set(0, -0.5, -1);
                    scene.add(groundMesh);
                }
            );

            // Event Listeners for mouse control
            renderer.domElement.addEventListener('mousedown', onMouseDown, false);
            renderer.domElement.addEventListener('mouseup', onMouseUp, false);
            renderer.domElement.addEventListener('mousemove', onMouseMove, false);

            // Handle window resizing
            window.addEventListener('resize', onWindowResize, false);
        }

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }

        // Handle window resize
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // Mouse interaction for camera rotation
        function onMouseDown(event) {
            isDragging = true;
            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }

        function onMouseUp(event) {
            isDragging = false;
        }

        function onMouseMove(event) {
            if (!isDragging) return;

            const deltaX = event.clientX - previousMousePosition.x;
            const deltaY = event.clientY - previousMousePosition.y;

            // Rotate camera around the origin
            const quaternion = new THREE.Quaternion().setFromEuler(
                new THREE.Euler(
                    -deltaY * rotationSpeed, // Vertical rotation
                    -deltaX * rotationSpeed, // Horizontal rotation
                    0,
                    'XYZ'
                )
            );

            camera.position.applyQuaternion(quaternion);
            camera.up.applyQuaternion(quaternion);
            camera.lookAt(0, 0, 0); // Always look at the origin

            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }

        // Start the scene when the window loads
        window.onload = function() {
            init();
            animate();
        };
    </script>
</body>
</html>
